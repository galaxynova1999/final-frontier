import{_ as s,c as n,o as a,d as l}from"./app.84a20b76.js";const A=JSON.parse('{"title":"使用 Atomics API 实现互斥锁","description":"","frontmatter":{"title":"使用 Atomics API 实现互斥锁"},"headers":[{"level":3,"title":"Atomics API介绍","slug":"atomics-api介绍","link":"#atomics-api介绍","children":[]},{"level":3,"title":"实现一个互斥锁","slug":"实现一个互斥锁","link":"#实现一个互斥锁","children":[]},{"level":3,"title":"同步上锁和解锁","slug":"同步上锁和解锁","link":"#同步上锁和解锁","children":[]},{"level":3,"title":"异步上锁","slug":"异步上锁","link":"#异步上锁","children":[]}],"relativePath":"article/js/mutex-atomics.md","lastUpdated":1630412965000}'),o={name:"article/js/mutex-atomics.md"},p=l(`<div class="tip custom-block"><p class="custom-block-title">原文链接</p><p><a href="https://v8.dev/features/atomics" target="_blank" rel="noreferrer">v8.dev</a></p></div><nav class="table-of-contents"><ul><li><a href="#atomics-api介绍">Atomics API介绍</a></li><li><a href="#实现一个互斥锁">实现一个互斥锁</a></li><li><a href="#同步上锁和解锁">同步上锁和解锁</a></li><li><a href="#异步上锁">异步上锁</a></li></ul></nav><h3 id="atomics-api介绍" tabindex="-1">Atomics API介绍 <a class="header-anchor" href="#atomics-api介绍" aria-hidden="true">#</a></h3><p><code>Atomics.wait</code> 和 <code>Atomics.notify</code> 是两个很有用的低层级(<code>low-level</code>)的同步原语(<code>synchronization primitives</code>)，可以用来实现互斥锁(<code>mutex</code>)和其他方式的同步。 值得注意的是， <code>Atomics.wait</code>是会产生阻塞的，所以就不能在主线程上调用该方法（强行使用会抛出<code>TypeError</code>）。</p><p>从<code>8.7</code>版本开始，<code>V8</code>提供了一个非阻塞的方法<code>Atomics.waitAsync</code>，可以用在主线程。</p><p>接下来我们将讲解如何实现一个互斥锁（既可以同步用于<code>worker</code>线程，也可以异步用于<code>主线程</code>）</p><p><code>Atomics.wait</code> 和 <code>Atomics.waitAsync</code> 接受下列的参数：</p><p><code>buffer</code>: 一个基于 <code>SharedArrayBuffer</code> 的 <code>Int32Array</code> 或 <code>BigInt64Array</code>。<br><code>index</code>: <code>buffer</code>内的一个有效索引值。<br><code>expectedValue</code>: 我们期望出现在 <code>(buffer, index)</code> 描述的内存位置上的值。<br><code>timeout</code>: 以毫秒为单位的超时(可选，默认为 <code>Infinity</code>)。</p><p><code>Atomics.wait</code>的返回值是一个<code>string</code>, 如果指定的内存位置上的值不是<code>expectedValue</code>，<code>Atomics.wait</code>会立即返回<code>not-equal</code>, 否则，调用该方法的线程会被阻塞，直到另外一个线程在同一个内存位置上调用了<code>Atomics.notify</code>，或者<code>timeout</code>指定的时间到了。 前一种情况下<code>Atomics.wait</code>的返回值是<code>ok</code>,后一种情况的返回值是<code>timed-out</code>。</p><p><code>Atomics.notify</code> 接受下列的参数:</p><p><code>buffer</code>: 一个基于 <code>SharedArrayBuffer</code> 的 <code>Int32Array</code> 或 <code>BigInt64Array</code> 。<br><code>index</code>: <code>buffer</code>内的一个有效索引值。<br><code>count</code>: 要通知多少等待者(<code>waiters</code>)（可选，默认为 <code>Infinity</code>）。</p><p>该方法将会以<code>FIFO</code>的顺序通知<code>count</code>个数量的等待者（<code>waiters</code>），<code>waiters</code>在<code>(buffer, index)</code>内存位置上调用了<code>wait</code>等方法。</p><p>同一内存位置上调用了<code>wait</code>或<code>waitAsync</code>方法的等待者，都将在同一个<code>FIFO</code>队列中等待唤醒</p><p>与<code>Atomics.wait</code>相反，<code>Atomics.waitAsync</code>方法总是立即返回，返回值如下所示：</p><ol><li><code>{ async: false, value: &#39;not-equal&#39; }</code> (如果指定的内存位置上不是期待值)</li><li><code>{ async: false, value: &#39;timed-out&#39; }</code> (只有当timeout为<code>0</code>时)</li><li><code>{ async: true, value: promise }</code></li></ol><p>第三种情况下返回的<code>promise</code>将在之后被<code>resolve</code>, <code>resolve</code>的值可能有<code>ok</code>(如果<code>Atomics.notify</code>在同一内存位置上被调用)，<code>timed-out</code>(如果超过了<code>timeout</code>指定的时间)， 这个promise不会被rejected</p><p>下面的例子展示了<code>Atomics.waitAsync</code>的基本用法：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> sab </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SharedArrayBuffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> i32a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Int32Array</span><span style="color:#A6ACCD;">(sab)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Atomics</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">waitAsync</span><span style="color:#A6ACCD;">(i32a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//                                     |  |  ^ timeout (opt)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//                                     |  ^ expected value</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//                                     ^ index</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (result</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">not-equal</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// The value in the SharedArrayBuffer was not the expected one.</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ok</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">/* notified */</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">/* value is &#39;timed-out&#39; */</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// In this thread, or in another thread:</span></span>
<span class="line"><span style="color:#A6ACCD;">Atomics</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">notify</span><span style="color:#A6ACCD;">(i32a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="实现一个互斥锁" tabindex="-1">实现一个互斥锁 <a class="header-anchor" href="#实现一个互斥锁" aria-hidden="true">#</a></h3><p>接下来，我们将讨论如何实现一个既可以同步又可以异步的互斥锁。 我们不会使用<code>timeout</code>这个参数，这个参数可以在实现条件变量（<code>condition variables</code>）的时候再使用。</p><p>互斥锁通过操作<code>SharedArrayBuffer</code>实现了下面三个方法：</p><ol><li>lock — 阻塞线程，直到我们能够获得互斥锁（只能在<code>worker</code>线程上使用）</li><li>unlock — 释放互斥锁</li><li>executeLocked(callback) — 非阻塞锁，可供主线程使用，在获得锁后执行回调函数</li></ol><p>具体实现如下，构造函数接收一个<code>SharedArrayBuffer</code>, 并初始化一个<code>Int32Array</code>。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AsyncLock</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">INDEX</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">UNLOCKED</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">LOCKED</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">sab</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SharedArrayBuffer</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">sab</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sab</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">i32a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Int32Array</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">sab</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">lock</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* … */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">unlock</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* … */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">executeLocked</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">f</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* … */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>i32a[0]的值要么是<code>LOCKED</code>， 要么是<code>UNLOCKED</code>。它也会被用于指定<code>Atomics.wait</code> 和 <code>Atomics.waitAsync</code>方法去<code>wait</code>的内存位置。</p><p>互斥锁需要保证下列的不变性关系:<br> 如果i32a[0] == LOCKED，并且有一个线程在等待（无论是通过<code>Atomics.wait</code>还是<code>Atomics.waitAsync</code>）i32a[0]上指定的值，它最终<strong>必须</strong>要收到通知（<code>be notified</code>）。<br> 在收到通知后，线程将会尝试获取锁。如果成功获取到锁，它<strong>必须</strong>在释放锁后再次发出通知。</p><h3 id="同步上锁和解锁" tabindex="-1">同步上锁和解锁 <a class="header-anchor" href="#同步上锁和解锁" aria-hidden="true">#</a></h3><p>接下来展示的是可以在<code>worker</code>线程中调用的阻塞性锁</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">lock</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Atomics</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compareExchange</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">i32a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AsyncLock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">INDEX</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                                    </span><span style="color:#676E95;font-style:italic;">/* old value &gt;&gt;&gt; */</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">AsyncLock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">UNLOCKED</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                                    </span><span style="color:#676E95;font-style:italic;">/* new value &gt;&gt;&gt; */</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">AsyncLock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">LOCKED</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AsyncLock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">UNLOCKED</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">Atomics</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">wait</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">i32a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AsyncLock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">INDEX</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#A6ACCD;">AsyncLock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">LOCKED</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// &lt;&lt;&lt; expected value at start</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>当一个线程调用<code>lock()</code>时，它首先尝试通过使用<code>Atomics.compareExchange</code>将锁状态从<code>UNLOCKED</code>更改为<code>LOCKED</code>来获取锁。</p><p><code>Atomics.compareExchange</code> 会尝试以原子操作的形式(<code>atomically</code>)进行状态更改，并返回指定内存位置上的原始值。 如果原始值是 <code>UNLOCKED</code>，我们就知道状态改变成功，并且该线程成功获得了锁。其他就不需要再做什么了。</p><p>如果<code>Atomics.compareExchange</code>无法更改锁状态，则必然有另一个线程正在持有锁。 因此，该线程使用<code>Atomics.wait</code>以等待另一个线程释放锁。</p><p>如果内存位置上仍是预期值（在本例中为 <code>AsyncLock.LOCKED</code>），则 <code>Atomics.wait</code> 方法将会阻塞该线程， 并且仅当另一个线程调用 <code>Atomics.notify</code> 时，<code>Atomics.wait</code> 调用才会返回。</p><p><code>unlock</code>方法则是将锁设置为 <code>UNLOCKED</code> 状态并调用 <code>Atomics.notify</code> 唤醒一个正在等待锁的等待者(<code>waiter</code>)。 这样的状态更改不应该失败，因为调用这个方法的线程必然持有锁，同时其他人不能也不应该调用 <code>unlock()</code>。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">unlock</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Atomics</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compareExchange</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">i32a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AsyncLock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">INDEX</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* old value &gt;&gt;&gt; */</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">AsyncLock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">LOCKED</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* new value &gt;&gt;&gt; */</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">AsyncLock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">UNLOCKED</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AsyncLock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">LOCKED</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Tried to unlock while not holding the mutex</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">Atomics</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">notify</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">i32a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AsyncLock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">INDEX</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>大部分情况下应该是这样的：<br> 锁是空闲的，线程 <code>T1</code> 通过使用 <code>Atomics.compareExchange</code> 更改锁状态来获取它。线程 <code>T2</code> 尝试通过调用 <code>Atomics.compareExchange</code> 来获取锁，但没有成功。然后<code>T2</code>调用 <code>Atomics.wait</code>，它会阻塞<code>T2</code>线程。</p><p>在之后的某个时刻，<code>T1</code> 释放锁并调用 <code>Atomics.notify</code>。这使得 <code>T2</code> 中的 <code>Atomics.wait</code> 调用返回<code>ok</code>，唤醒了 <code>T2</code>线程。然后 <code>T2</code> 再次尝试获取锁，这次成功了。</p><p>此外还有2种可能的极端情况:</p><p>情况1. <code>T1</code> 持有锁，<code>T2</code> 尝试获取它。首先，<code>T2</code> 尝试使用 <code>Atomics.compareExchange</code> 更改锁定状态，但没有成功。 但随后 <code>T1</code> 在 <code>T2</code> 调用 <code>Atomics.wait</code> 之前就释放了锁。当 <code>T2</code> 调用 <code>Atomics.wait</code> 时，它会立即返回值 <code>not-equal</code>。在这种情况下，<code>T2</code> 将继续下一次循环迭代，尝试再次获取锁。</p><p>情况2. <code>T1</code> 持有锁，<code>T2</code> 使用 <code>Atomics.wait</code> 等待它。 <code>T1 </code>释放锁 —— <code>T2</code> 被唤醒（<code>Atomics.wait</code> 调用返回）并尝试执行 <code>Atomics.compareExchange</code> 以获取锁， 但另一个线程 <code>T3</code> 在<code>T2</code>之前就已经获取了锁（可能是运行更快等原因）。因此<code>T2</code>对 <code>Atomics.compareExchange</code> 的调用未能获得锁，<code>T2</code> 再次调用 <code>Atomics.wait</code>，阻塞直到 <code>T3</code> 释放锁。</p><p>由于后一种情况，互斥锁并不“公平”，有可能 <code>T2</code> 一直在等待释放锁，但 <code>T3</code> 来了就马上拿到了锁。一个在实现上更好的锁可能会使用多种状态来区分“锁定”和“竞争锁定”。</p><h3 id="异步上锁" tabindex="-1">异步上锁 <a class="header-anchor" href="#异步上锁" aria-hidden="true">#</a></h3><p>与阻塞性的<code>lock</code>等方法不同的是，非阻塞性的<code>executeLocked</code>方法可以被主线程调用。它获取一个回调函数作为其唯一参数，并在成功获取锁后执行回调函数。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">executeLocked</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">f</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">async</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">tryGetLock</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Atomics</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compareExchange</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">i32a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AsyncLock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">INDEX</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                                        </span><span style="color:#676E95;font-style:italic;">/* old value &gt;&gt;&gt; */</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">AsyncLock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">UNLOCKED</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                                        </span><span style="color:#676E95;font-style:italic;">/* new value &gt;&gt;&gt; */</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">AsyncLock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">LOCKED</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AsyncLock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">UNLOCKED</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">f</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unlock</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Atomics</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">waitAsync</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">i32a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AsyncLock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">INDEX</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                                                        </span><span style="color:#A6ACCD;">AsyncLock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">LOCKED</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">                                                        </span><span style="color:#676E95;font-style:italic;">//  ^ expected value at start</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">tryGetLock</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>内部函数 <code>tryGetLock</code> 先尝试使用 <code>Atomics.compareExchange</code> 获取锁。 如果成功改变了锁状态，它将执行回调，释放锁，然后返回。</p><p>如果 <code>Atomics.compareExchange</code> 获取锁失败，我们需要在锁可能空闲时重试。 我们不能阻塞并等待锁释放 —— 相反，我们使用 <code>Atomics.waitAsync</code> 和它返回的 <code>Promise</code> 来进行新的尝试。</p><p>如果我们调用了 <code>Atomics.waitAsync</code>，当持有锁的线程执行 <code>Atomics.notify</code> 时，返回的 <code>Promise</code> 将会被resolve。 然后等待锁的线程尝试再次获取锁，就像以前一样。</p><p>同样的极端情况（在 <code>Atomics.compareExchange</code> 调用和 <code>Atomics.waitAsync</code> 调用之间释放锁，以及在 <code>Promise</code> resolve 和 <code>Atomics.compareExchange</code>调用之间再次获取锁）在这里也是存在的， 所以，代码必须以稳健(<code>robust</code>)的方式处理它们。</p>`,48),e=[p];function c(t,r,y,i,F,D){return a(),n("div",null,e)}const C=s(o,[["render",c]]);export{A as __pageData,C as default};
