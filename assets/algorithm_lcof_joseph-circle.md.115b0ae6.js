import{_ as s,c as n,o as a,d as l}from"./app.84a20b76.js";const d=JSON.parse('{"title":"62. 圆圈中最后剩下的数字","description":"","frontmatter":{"title":"62. 圆圈中最后剩下的数字"},"headers":[{"level":3,"title":"解题思路","slug":"解题思路","link":"#解题思路","children":[]},{"level":3,"title":"动态规划解析：","slug":"动态规划解析","link":"#动态规划解析","children":[]},{"level":3,"title":"复杂度分析","slug":"复杂度分析","link":"#复杂度分析","children":[]},{"level":3,"title":"代码：","slug":"代码","link":"#代码","children":[]}],"relativePath":"algorithm/lcof/joseph-circle.md","lastUpdated":1633088129000}'),p={name:"algorithm/lcof/joseph-circle.md"},o=l(`<div class="tip custom-block"><p class="custom-block-title">原题链接</p><p><a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/" target="_blank" rel="noreferrer">LeetCode</a></p></div><h3 id="解题思路" tabindex="-1">解题思路 <a class="header-anchor" href="#解题思路" aria-hidden="true">#</a></h3><p>模拟整个删除过程最直观，即构建一个长度为 $n$ 的链表，各节点值为对应的顺序索引；每轮删除第 $m$ 个节点，直至链表长度为 1 时结束，返回最后剩余节点的值即可。</p><p>模拟法需要循环删除 $n - 1$ 轮，每轮在链表中寻找删除节点需要 $m$ 次访问操作（链表线性遍历），因此总体时间复杂度为 $O(nm)$ 。题目给定的 $m, n$ 取值范围如下所示，观察可知此时间复杂度是不可接受的。</p><p>$$ 1 \\leq n \\leq 10^5 \\ 1 \\leq m \\leq 10^6 $$</p><blockquote><p>实际上，本题是著名的 “约瑟夫环” 问题，可使用 <strong>动态规划</strong> 解决。</p></blockquote><p>输入 $n, m$ ，记此约瑟夫环问题为 「$n, m$ 问题」 ，设解（即最后留下的数字）为 $f(n)$ ，则有：</p><ul><li>「$n, m$ 问题」：数字环为 $0, 1, 2, ..., n - 1$ ，解为 $f(n)$ ；</li><li>「$n-1, m$ 问题」：数字环为 $0, 1, 2, ..., n - 2$ ，解为 $f(n-1)$ ；</li><li>以此类推……</li></ul><blockquote><p>请注意，数字环是 <strong>首尾相接</strong> 的，为方便行文，本文使用列表形式表示。</p></blockquote><p>对于「$n, m$ 问题」，首轮删除环中第 $m$ 个数字后，得到一个长度为 $n - 1$ 的数字环。由于有可能 $m &gt; n$ ，因此删除的数字为 $(m - 1) % n$ ，删除后的数字环从下个数字（即 $m % n$ ）开始， 设 $t = m % n$ ，可得数字环：</p><p>$$ t, t + 1, t + 2, ..., 0, 1, ..., t - 3, t - 2 $$</p><p>例如，当$n = 4, m = 4$时，第一个被删除的数字是 $(4 - 1) % 4 = 3$，下一个计数开始的数字是$4 % 4 = 0$。</p><p>删除一轮后的数字环也变为一个「$n-1, m$ 问题」，观察以下数字编号对应关系：</p><p>$$ \\begin{aligned} \\text{「n-1, m 问题」} &amp;&amp; \\rightarrow &amp;&amp; \\text{「n, m 问题」删除后} \\ 0 &amp;&amp; \\rightarrow &amp;&amp; t + 0 \\ 1 &amp;&amp; \\rightarrow &amp;&amp; t + 1 \\ ... &amp;&amp; \\rightarrow &amp;&amp; ... \\ n - 2 &amp;&amp; \\rightarrow &amp;&amp; t - 2 \\ \\end{aligned} $$</p><p>设「$n-1, m$ 问题」某数字为 $x$ ，则可得递推关系（<strong>关键点</strong>）：</p><p>$$ x \\rightarrow (x + t) % n \\ $$</p><p>如何理解上面的公式？</p><p>对于$n-1, m$ 问题」中的任意数字$x$，我们都能推出它在「$n, m$ 问题」删除一个值后的对应值为$(x + t) % n$（<strong>应该指的是下标，本题中刚好下标等于数字本身</strong>）</p><p>即两个问题可以对应起来，长度为$n-1 \\Leftrightarrow$ 长度为 $n$ 经过第一轮删除</p><p>换而言之，若已知「$n-1, m$ 问题」的解 $f(n - 1)$ （$n-1$问题中剩下的最后的数字），则可通过以上公式计算得到「$n, m$ 问题」的解 $f(n)$（$n$问题中剩下的最后的数字） ，即：</p><p>$$ \\begin{aligned} f(n) &amp; = (f(n - 1) + t) % n \\ &amp; = (f(n - 1) + m % n) % n \\ &amp; = (f(n - 1) % n + m % n % n) % n \\quad \\text{(模运算的基本性质)}\\ &amp; = (f(n - 1) % n + m % n) % n \\quad \\text{(}m % n\\text{的结果一定小于n, 所以} m % n % n = m % n\\text{)}\\ &amp; = (f(n - 1) + m) % n \\quad \\text{(模运算性质的反向应用)} \\end{aligned} $$</p><p>$f(n)$ 可由 $f(n - 1)$ 得到，$f(n - 1)$ 可由 $f(n - 2)$ 得到，……，$f(2)$ 可由 $f(1)$ 得到；</p><p>因此，若给定 $f(1)$ 的值，就可以递推至任意 $f(n)$ 。而「$1, m$ 问题」的解 $f(1) = 0$ 恒成立，即无论 $m$ 为何值，长度为 1 的数字环留下的是一定是数字 $0$ 。</p><p>以上数学推导本质是得出动态规划的 <code>转移方程</code> 和 <code>初始状态</code> 。</p><h3 id="动态规划解析" tabindex="-1">动态规划解析： <a class="header-anchor" href="#动态规划解析" aria-hidden="true">#</a></h3><ol><li><strong>状态定义：</strong> 设「$i, m$ 问题」的解为 $dp[i]$</li><li><strong>转移方程：</strong> 通过以下公式可从 $dp[i - 1]$ 递推得到 $dp[i]$</li></ol><p>$$ dp[i] = (dp[i - 1] + m) % i $$</p><ol start="3"><li><strong>初始状态：</strong>「$1, m$ 问题」的解恒为 $0$ ，即 $dp[1] = 0$</li><li><strong>返回值：</strong> 返回「$n, m$ 问题」的解 $dp[n]$</li></ol><h3 id="复杂度分析" tabindex="-1">复杂度分析 <a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a></h3><ul><li><strong>时间复杂度 $O(n)$ ：</strong> 状态转移循环 $n - 1$ 次使用 $O(n)$ 时间，状态转移方程计算使用 $O(1)$ 时间；</li><li><strong>空间复杂度 $O(1)$ ：</strong> 使用常数大小的额外空间；</li></ul><h3 id="代码" tabindex="-1">代码： <a class="header-anchor" href="#代码" aria-hidden="true">#</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">lastRemaining</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">m</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">dp</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 初始条件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">dp</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">dp</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">m</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dp</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,32),e=[o];function t(r,c,$,i,y,F){return a(),n("div",null,e)}const D=s(p,[["render",t]]);export{d as __pageData,D as default};
