import{_ as a,o as l,c as p,k as s,a as n,X as o}from"./chunks/framework.cc6e947e.js";const _=JSON.parse('{"title":"146. LRU缓存","description":"","frontmatter":{"title":"146. LRU缓存"},"headers":[],"relativePath":"algorithm/leetcode/lru.md","filePath":"algorithm/leetcode/lru.md","lastUpdated":1633355423000}'),e={name:"algorithm/leetcode/lru.md"},t=s("div",{class:"tip custom-block"},[s("p",{class:"custom-block-title"},"原题链接"),s("p",null,[s("a",{href:"https://leetcode-cn.com/problems/lru-cache/",target:"_blank",rel:"noreferrer"},"LeetCode 146")])],-1),c=s("p",null,"LRU 缓存机制可以通过哈希表辅以双向链表实现，我们用一个哈希表和一个双向链表维护所有在缓存中的键值对。",-1),r=s("ul",null,[s("li",null,[s("p",null,"双向链表按照被使用的顺序存储了这些键值对，靠近头部的键值对是最近使用的，而靠近尾部的键值对是最久未使用的。")]),s("li",null,[s("p",null,"哈希表即为普通的哈希映射（HashMap），通过缓存数据的键映射到其在双向链表中的位置。")])],-1),y=s("p",null,[n("这样以来，我们首先使用哈希表进行定位，找出缓存项在双向链表中的位置，随后将其移动到双向链表的头部，即可在 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),n(" 的时间内完成 "),s("code",null,"get"),n(" 或者 "),s("code",null,"put"),n(" 操作。具体的方法如下：")],-1),F=s("ul",null,[s("li",null,[s("p",null,[n("对于 "),s("code",null,"get"),n(" 操作，首先判断 "),s("code",null,"key"),n(" 是否存在：")]),s("ul",null,[s("li",null,[s("p",null,[n("如果 "),s("code",null,"key"),n(" 不存在，则返回 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.72777em","vertical-align":"-0.08333em"}}),s("span",{class:"mord"},"−"),s("span",{class:"mord"},"1")])])]),n("；")])]),s("li",null,[s("p",null,[n("如果 "),s("code",null,"key"),n(" 存在，则 "),s("code",null,"key"),n(" 对应的节点是最近被使用的节点。通过哈希表定位到该节点在双向链表中的位置，并将其移动到双向链表的头部，最后返回该节点的值。")])])])]),s("li",null,[s("p",null,[n("对于 "),s("code",null,"put"),n(" 操作，首先判断 "),s("code",null,"key"),n(" 是否存在：")]),s("ul",null,[s("li",null,[s("p",null,[n("如果 "),s("code",null,"key"),n(" 不存在，使用 "),s("code",null,"key"),n(" 和 "),s("code",null,"value"),n(" 创建一个新的节点，在双向链表的头部添加该节点，并将 "),s("code",null,"key"),n(" 和该节点添加进哈希表中。然后判断双向链表的节点数是否超出容量，如果超出容量，则删除双向链表的尾部节点，并删除哈希表中对应的项；")])]),s("li",null,[s("p",null,[n("如果 "),s("code",null,"key"),n(" 存在，则与 "),s("code",null,"get"),n(" 操作类似，先通过哈希表定位，再将对应的节点的值更新为 "),s("code",null,"value"),n("，并将该节点移到双向链表的头部。")])])])])],-1),D=s("p",null,[n("上述各项操作中，访问哈希表的时间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),n("，在双向链表的头部添加节点、在双向链表的尾部删除节点的复杂度也为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),n("。而将一个节点移到双向链表的头部，可以分成「删除该节点」和「在双向链表的头部添加节点」两步操作，都可以在 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),n(" 时间内完成。")],-1),i=s("div",{class:"tip custom-block"},[s("p",{class:"custom-block-title"},"TIP"),s("p",null,[n("在双向链表的实现中，使用一个"),s("strong",null,"伪头部"),n("（dummy head）和"),s("strong",null,"伪尾部"),n("（dummy tail）标记界限， 这样在添加节点和删除节点的时候就不需要检查相邻的节点是否存在。")])],-1),C=s("p",null,[s("strong",null,"复杂度分析")],-1),A=s("ul",null,[s("li",null,[s("p",null,[n("时间复杂度：对于 "),s("code",null,"put"),n(" 和 "),s("code",null,"get"),n(" 都是 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),n("。")])]),s("li",null,[s("p",null,[n("空间复杂度："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mtext",null,"capacity"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(\\text{capacity})")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord text"},[s("span",{class:"mord"},"capacity")]),s("span",{class:"mclose"},")")])])]),n("，因为哈希表和双向链表最多存储 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"capacity"),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"\\text{capacity} + 1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8623000000000001em","vertical-align":"-0.19444em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"capacity")]),s("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),s("span",{class:"mord"},"1")])])]),n(" 个元素。")])])],-1),m=o("",1),u=[t,c,r,y,F,D,i,C,A,m];function b(d,h,g,x,B,k){return l(),p("div",null,u)}const w=a(e,[["render",b]]);export{_ as __pageData,w as default};
